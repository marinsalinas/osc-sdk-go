/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.1
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// StateComment Information about the change of state.
type StateComment struct {
	// The code of the change of state.
	StateCode *string `json:"StateCode,omitempty"`
	// A message explaining the change of state.
	StateMessage *string `json:"StateMessage,omitempty"`
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *StateComment) GetStateCode() string {
	if o == nil || o.StateCode == nil {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *StateComment) GetStateCodeOk() (string, bool) {
	if o == nil || o.StateCode == nil {
		var ret string
		return ret, false
	}
	return *o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *StateComment) HasStateCode() bool {
	if o != nil && o.StateCode != nil {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *StateComment) SetStateCode(v string) {
	o.StateCode = &v
}

// GetStateMessage returns the StateMessage field value if set, zero value otherwise.
func (o *StateComment) GetStateMessage() string {
	if o == nil || o.StateMessage == nil {
		var ret string
		return ret
	}
	return *o.StateMessage
}

// GetStateMessageOk returns a tuple with the StateMessage field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *StateComment) GetStateMessageOk() (string, bool) {
	if o == nil || o.StateMessage == nil {
		var ret string
		return ret, false
	}
	return *o.StateMessage, true
}

// HasStateMessage returns a boolean if a field has been set.
func (o *StateComment) HasStateMessage() bool {
	if o != nil && o.StateMessage != nil {
		return true
	}

	return false
}

// SetStateMessage gets a reference to the given string and assigns it to the StateMessage field.
func (o *StateComment) SetStateMessage(v string) {
	o.StateMessage = &v
}

type NullableStateComment struct {
	Value        StateComment
	ExplicitNull bool
}

func (v NullableStateComment) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableStateComment) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
