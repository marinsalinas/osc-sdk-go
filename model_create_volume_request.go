/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 0.15
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// CreateVolumeRequest struct for CreateVolumeRequest
type CreateVolumeRequest struct {
	// If `true`, checks whether you have the required permissions to perform the action.
	DryRun *bool `json:"DryRun,omitempty"`
	// The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000`.
	Iops *int64 `json:"Iops,omitempty"`
	// The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14,901 GiB.
	Size *int64 `json:"Size,omitempty"`
	// The ID of the snapshot from which you want to create the volume.
	SnapshotId *string `json:"SnapshotId,omitempty"`
	// The Subregion in which you want to create the volume.
	SubregionName string `json:"SubregionName"`
	// The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br /> For more information about volume types, see [Volume Types and IOPS](https://wiki.outscale.net/display/EN/About+Volumes#AboutVolumes-VolumeTypesVolumeTypesandIOPS).
	VolumeType *string `json:"VolumeType,omitempty"`
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *CreateVolumeRequest) GetDryRun() bool {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetDryRunOk() (bool, bool) {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret, false
	}
	return *o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *CreateVolumeRequest) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *CreateVolumeRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *CreateVolumeRequest) GetIops() int64 {
	if o == nil || o.Iops == nil {
		var ret int64
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetIopsOk() (int64, bool) {
	if o == nil || o.Iops == nil {
		var ret int64
		return ret, false
	}
	return *o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *CreateVolumeRequest) HasIops() bool {
	if o != nil && o.Iops != nil {
		return true
	}

	return false
}

// SetIops gets a reference to the given int64 and assigns it to the Iops field.
func (o *CreateVolumeRequest) SetIops(v int64) {
	o.Iops = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateVolumeRequest) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetSizeOk() (int64, bool) {
	if o == nil || o.Size == nil {
		var ret int64
		return ret, false
	}
	return *o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateVolumeRequest) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *CreateVolumeRequest) SetSize(v int64) {
	o.Size = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *CreateVolumeRequest) GetSnapshotId() string {
	if o == nil || o.SnapshotId == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetSnapshotIdOk() (string, bool) {
	if o == nil || o.SnapshotId == nil {
		var ret string
		return ret, false
	}
	return *o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *CreateVolumeRequest) HasSnapshotId() bool {
	if o != nil && o.SnapshotId != nil {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *CreateVolumeRequest) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetSubregionName returns the SubregionName field value
func (o *CreateVolumeRequest) GetSubregionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubregionName
}

// SetSubregionName sets field value
func (o *CreateVolumeRequest) SetSubregionName(v string) {
	o.SubregionName = v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *CreateVolumeRequest) GetVolumeType() string {
	if o == nil || o.VolumeType == nil {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetVolumeTypeOk() (string, bool) {
	if o == nil || o.VolumeType == nil {
		var ret string
		return ret, false
	}
	return *o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *CreateVolumeRequest) HasVolumeType() bool {
	if o != nil && o.VolumeType != nil {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *CreateVolumeRequest) SetVolumeType(v string) {
	o.VolumeType = &v
}

type NullableCreateVolumeRequest struct {
	Value        CreateVolumeRequest
	ExplicitNull bool
}

func (v NullableCreateVolumeRequest) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCreateVolumeRequest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
