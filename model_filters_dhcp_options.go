/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 0.15
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// FiltersDhcpOptions One or more filters.
type FiltersDhcpOptions struct {
	// If `true`, lists all default DHCP options set. If `false`, lists all non-default DHCP options set.
	Default *bool `json:"Default,omitempty"`
	// The IDs of the DHCP options sets.
	DhcpOptionsSetIds *[]string `json:"DhcpOptionsSetIds,omitempty"`
	// The domain name servers used for the DHCP options sets.
	DomainNameServers *[]string `json:"DomainNameServers,omitempty"`
	// The domain names used for the DHCP options sets.
	DomainNames *[]string `json:"DomainNames,omitempty"`
	// The Network Time Protocol (NTP) servers used for the DHCP options sets.
	NtpServers *[]string `json:"NtpServers,omitempty"`
	// The keys of the tags associated with the DHCP options sets.
	TagKeys *[]string `json:"TagKeys,omitempty"`
	// The values of the tags associated with the DHCP options sets.
	TagValues *[]string `json:"TagValues,omitempty"`
	// The key/value combination of the tags associated with the DHCP options sets, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.
	Tags *[]string `json:"Tags,omitempty"`
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetDefaultOk() (bool, bool) {
	if o == nil || o.Default == nil {
		var ret bool
		return ret, false
	}
	return *o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *FiltersDhcpOptions) SetDefault(v bool) {
	o.Default = &v
}

// GetDhcpOptionsSetIds returns the DhcpOptionsSetIds field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetDhcpOptionsSetIds() []string {
	if o == nil || o.DhcpOptionsSetIds == nil {
		var ret []string
		return ret
	}
	return *o.DhcpOptionsSetIds
}

// GetDhcpOptionsSetIdsOk returns a tuple with the DhcpOptionsSetIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetDhcpOptionsSetIdsOk() ([]string, bool) {
	if o == nil || o.DhcpOptionsSetIds == nil {
		var ret []string
		return ret, false
	}
	return *o.DhcpOptionsSetIds, true
}

// HasDhcpOptionsSetIds returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasDhcpOptionsSetIds() bool {
	if o != nil && o.DhcpOptionsSetIds != nil {
		return true
	}

	return false
}

// SetDhcpOptionsSetIds gets a reference to the given []string and assigns it to the DhcpOptionsSetIds field.
func (o *FiltersDhcpOptions) SetDhcpOptionsSetIds(v []string) {
	o.DhcpOptionsSetIds = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetDomainNameServers() []string {
	if o == nil || o.DomainNameServers == nil {
		var ret []string
		return ret
	}
	return *o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || o.DomainNameServers == nil {
		var ret []string
		return ret, false
	}
	return *o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasDomainNameServers() bool {
	if o != nil && o.DomainNameServers != nil {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *FiltersDhcpOptions) SetDomainNameServers(v []string) {
	o.DomainNameServers = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetDomainNames() []string {
	if o == nil || o.DomainNames == nil {
		var ret []string
		return ret
	}
	return *o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetDomainNamesOk() ([]string, bool) {
	if o == nil || o.DomainNames == nil {
		var ret []string
		return ret, false
	}
	return *o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *FiltersDhcpOptions) SetDomainNames(v []string) {
	o.DomainNames = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetNtpServers() []string {
	if o == nil || o.NtpServers == nil {
		var ret []string
		return ret
	}
	return *o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetNtpServersOk() ([]string, bool) {
	if o == nil || o.NtpServers == nil {
		var ret []string
		return ret, false
	}
	return *o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasNtpServers() bool {
	if o != nil && o.NtpServers != nil {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *FiltersDhcpOptions) SetNtpServers(v []string) {
	o.NtpServers = &v
}

// GetTagKeys returns the TagKeys field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetTagKeys() []string {
	if o == nil || o.TagKeys == nil {
		var ret []string
		return ret
	}
	return *o.TagKeys
}

// GetTagKeysOk returns a tuple with the TagKeys field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetTagKeysOk() ([]string, bool) {
	if o == nil || o.TagKeys == nil {
		var ret []string
		return ret, false
	}
	return *o.TagKeys, true
}

// HasTagKeys returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasTagKeys() bool {
	if o != nil && o.TagKeys != nil {
		return true
	}

	return false
}

// SetTagKeys gets a reference to the given []string and assigns it to the TagKeys field.
func (o *FiltersDhcpOptions) SetTagKeys(v []string) {
	o.TagKeys = &v
}

// GetTagValues returns the TagValues field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetTagValues() []string {
	if o == nil || o.TagValues == nil {
		var ret []string
		return ret
	}
	return *o.TagValues
}

// GetTagValuesOk returns a tuple with the TagValues field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetTagValuesOk() ([]string, bool) {
	if o == nil || o.TagValues == nil {
		var ret []string
		return ret, false
	}
	return *o.TagValues, true
}

// HasTagValues returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasTagValues() bool {
	if o != nil && o.TagValues != nil {
		return true
	}

	return false
}

// SetTagValues gets a reference to the given []string and assigns it to the TagValues field.
func (o *FiltersDhcpOptions) SetTagValues(v []string) {
	o.TagValues = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FiltersDhcpOptions) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *FiltersDhcpOptions) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret, false
	}
	return *o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FiltersDhcpOptions) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FiltersDhcpOptions) SetTags(v []string) {
	o.Tags = &v
}

type NullableFiltersDhcpOptions struct {
	Value        FiltersDhcpOptions
	ExplicitNull bool
}

func (v NullableFiltersDhcpOptions) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableFiltersDhcpOptions) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
