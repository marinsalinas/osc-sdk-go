/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 0.15
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// LoadBalancer Information about the load balancer.
type LoadBalancer struct {
	AccessLog *AccessLog `json:"AccessLog,omitempty"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies *[]ApplicationStickyCookiePolicy `json:"ApplicationStickyCookiePolicies,omitempty"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds *[]string `json:"BackendVmIds,omitempty"`
	// The DNS name of the load balancer.
	DnsName *string `json:"DnsName,omitempty"`
	HealthCheck *HealthCheck `json:"HealthCheck,omitempty"`
	// The listeners for the load balancer.
	Listeners *[]Listener `json:"Listeners,omitempty"`
	// The name of the load balancer.
	LoadBalancerName *string `json:"LoadBalancerName,omitempty"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies *[]LoadBalancerStickyCookiePolicy `json:"LoadBalancerStickyCookiePolicies,omitempty"`
	// The type of load balancer. Valid only for load balancers in a Net.<br /> If `LoadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP address.<br /> If `LoadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP address.
	LoadBalancerType *string `json:"LoadBalancerType,omitempty"`
	// The ID of the Net for the load balancer.
	NetId *string `json:"NetId,omitempty"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups *[]string `json:"SecurityGroups,omitempty"`
	SourceSecurityGroup *SourceSecurityGroup `json:"SourceSecurityGroup,omitempty"`
	// The IDs of the Subnets for the load balancer.
	Subnets *[]string `json:"Subnets,omitempty"`
	// One or more names of Subregions for the load balancer.
	SubregionNames *[]string `json:"SubregionNames,omitempty"`
	// One or more tags associated with the load balancer.
	Tags *[]ResourceTag `json:"Tags,omitempty"`
}

// GetAccessLog returns the AccessLog field value if set, zero value otherwise.
func (o *LoadBalancer) GetAccessLog() AccessLog {
	if o == nil || o.AccessLog == nil {
		var ret AccessLog
		return ret
	}
	return *o.AccessLog
}

// GetAccessLogOk returns a tuple with the AccessLog field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetAccessLogOk() (AccessLog, bool) {
	if o == nil || o.AccessLog == nil {
		var ret AccessLog
		return ret, false
	}
	return *o.AccessLog, true
}

// HasAccessLog returns a boolean if a field has been set.
func (o *LoadBalancer) HasAccessLog() bool {
	if o != nil && o.AccessLog != nil {
		return true
	}

	return false
}

// SetAccessLog gets a reference to the given AccessLog and assigns it to the AccessLog field.
func (o *LoadBalancer) SetAccessLog(v AccessLog) {
	o.AccessLog = &v
}

// GetApplicationStickyCookiePolicies returns the ApplicationStickyCookiePolicies field value if set, zero value otherwise.
func (o *LoadBalancer) GetApplicationStickyCookiePolicies() []ApplicationStickyCookiePolicy {
	if o == nil || o.ApplicationStickyCookiePolicies == nil {
		var ret []ApplicationStickyCookiePolicy
		return ret
	}
	return *o.ApplicationStickyCookiePolicies
}

// GetApplicationStickyCookiePoliciesOk returns a tuple with the ApplicationStickyCookiePolicies field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetApplicationStickyCookiePoliciesOk() ([]ApplicationStickyCookiePolicy, bool) {
	if o == nil || o.ApplicationStickyCookiePolicies == nil {
		var ret []ApplicationStickyCookiePolicy
		return ret, false
	}
	return *o.ApplicationStickyCookiePolicies, true
}

// HasApplicationStickyCookiePolicies returns a boolean if a field has been set.
func (o *LoadBalancer) HasApplicationStickyCookiePolicies() bool {
	if o != nil && o.ApplicationStickyCookiePolicies != nil {
		return true
	}

	return false
}

// SetApplicationStickyCookiePolicies gets a reference to the given []ApplicationStickyCookiePolicy and assigns it to the ApplicationStickyCookiePolicies field.
func (o *LoadBalancer) SetApplicationStickyCookiePolicies(v []ApplicationStickyCookiePolicy) {
	o.ApplicationStickyCookiePolicies = &v
}

// GetBackendVmIds returns the BackendVmIds field value if set, zero value otherwise.
func (o *LoadBalancer) GetBackendVmIds() []string {
	if o == nil || o.BackendVmIds == nil {
		var ret []string
		return ret
	}
	return *o.BackendVmIds
}

// GetBackendVmIdsOk returns a tuple with the BackendVmIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetBackendVmIdsOk() ([]string, bool) {
	if o == nil || o.BackendVmIds == nil {
		var ret []string
		return ret, false
	}
	return *o.BackendVmIds, true
}

// HasBackendVmIds returns a boolean if a field has been set.
func (o *LoadBalancer) HasBackendVmIds() bool {
	if o != nil && o.BackendVmIds != nil {
		return true
	}

	return false
}

// SetBackendVmIds gets a reference to the given []string and assigns it to the BackendVmIds field.
func (o *LoadBalancer) SetBackendVmIds(v []string) {
	o.BackendVmIds = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *LoadBalancer) GetDnsName() string {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetDnsNameOk() (string, bool) {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret, false
	}
	return *o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *LoadBalancer) HasDnsName() bool {
	if o != nil && o.DnsName != nil {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *LoadBalancer) SetDnsName(v string) {
	o.DnsName = &v
}

// GetHealthCheck returns the HealthCheck field value if set, zero value otherwise.
func (o *LoadBalancer) GetHealthCheck() HealthCheck {
	if o == nil || o.HealthCheck == nil {
		var ret HealthCheck
		return ret
	}
	return *o.HealthCheck
}

// GetHealthCheckOk returns a tuple with the HealthCheck field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetHealthCheckOk() (HealthCheck, bool) {
	if o == nil || o.HealthCheck == nil {
		var ret HealthCheck
		return ret, false
	}
	return *o.HealthCheck, true
}

// HasHealthCheck returns a boolean if a field has been set.
func (o *LoadBalancer) HasHealthCheck() bool {
	if o != nil && o.HealthCheck != nil {
		return true
	}

	return false
}

// SetHealthCheck gets a reference to the given HealthCheck and assigns it to the HealthCheck field.
func (o *LoadBalancer) SetHealthCheck(v HealthCheck) {
	o.HealthCheck = &v
}

// GetListeners returns the Listeners field value if set, zero value otherwise.
func (o *LoadBalancer) GetListeners() []Listener {
	if o == nil || o.Listeners == nil {
		var ret []Listener
		return ret
	}
	return *o.Listeners
}

// GetListenersOk returns a tuple with the Listeners field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetListenersOk() ([]Listener, bool) {
	if o == nil || o.Listeners == nil {
		var ret []Listener
		return ret, false
	}
	return *o.Listeners, true
}

// HasListeners returns a boolean if a field has been set.
func (o *LoadBalancer) HasListeners() bool {
	if o != nil && o.Listeners != nil {
		return true
	}

	return false
}

// SetListeners gets a reference to the given []Listener and assigns it to the Listeners field.
func (o *LoadBalancer) SetListeners(v []Listener) {
	o.Listeners = &v
}

// GetLoadBalancerName returns the LoadBalancerName field value if set, zero value otherwise.
func (o *LoadBalancer) GetLoadBalancerName() string {
	if o == nil || o.LoadBalancerName == nil {
		var ret string
		return ret
	}
	return *o.LoadBalancerName
}

// GetLoadBalancerNameOk returns a tuple with the LoadBalancerName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetLoadBalancerNameOk() (string, bool) {
	if o == nil || o.LoadBalancerName == nil {
		var ret string
		return ret, false
	}
	return *o.LoadBalancerName, true
}

// HasLoadBalancerName returns a boolean if a field has been set.
func (o *LoadBalancer) HasLoadBalancerName() bool {
	if o != nil && o.LoadBalancerName != nil {
		return true
	}

	return false
}

// SetLoadBalancerName gets a reference to the given string and assigns it to the LoadBalancerName field.
func (o *LoadBalancer) SetLoadBalancerName(v string) {
	o.LoadBalancerName = &v
}

// GetLoadBalancerStickyCookiePolicies returns the LoadBalancerStickyCookiePolicies field value if set, zero value otherwise.
func (o *LoadBalancer) GetLoadBalancerStickyCookiePolicies() []LoadBalancerStickyCookiePolicy {
	if o == nil || o.LoadBalancerStickyCookiePolicies == nil {
		var ret []LoadBalancerStickyCookiePolicy
		return ret
	}
	return *o.LoadBalancerStickyCookiePolicies
}

// GetLoadBalancerStickyCookiePoliciesOk returns a tuple with the LoadBalancerStickyCookiePolicies field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetLoadBalancerStickyCookiePoliciesOk() ([]LoadBalancerStickyCookiePolicy, bool) {
	if o == nil || o.LoadBalancerStickyCookiePolicies == nil {
		var ret []LoadBalancerStickyCookiePolicy
		return ret, false
	}
	return *o.LoadBalancerStickyCookiePolicies, true
}

// HasLoadBalancerStickyCookiePolicies returns a boolean if a field has been set.
func (o *LoadBalancer) HasLoadBalancerStickyCookiePolicies() bool {
	if o != nil && o.LoadBalancerStickyCookiePolicies != nil {
		return true
	}

	return false
}

// SetLoadBalancerStickyCookiePolicies gets a reference to the given []LoadBalancerStickyCookiePolicy and assigns it to the LoadBalancerStickyCookiePolicies field.
func (o *LoadBalancer) SetLoadBalancerStickyCookiePolicies(v []LoadBalancerStickyCookiePolicy) {
	o.LoadBalancerStickyCookiePolicies = &v
}

// GetLoadBalancerType returns the LoadBalancerType field value if set, zero value otherwise.
func (o *LoadBalancer) GetLoadBalancerType() string {
	if o == nil || o.LoadBalancerType == nil {
		var ret string
		return ret
	}
	return *o.LoadBalancerType
}

// GetLoadBalancerTypeOk returns a tuple with the LoadBalancerType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetLoadBalancerTypeOk() (string, bool) {
	if o == nil || o.LoadBalancerType == nil {
		var ret string
		return ret, false
	}
	return *o.LoadBalancerType, true
}

// HasLoadBalancerType returns a boolean if a field has been set.
func (o *LoadBalancer) HasLoadBalancerType() bool {
	if o != nil && o.LoadBalancerType != nil {
		return true
	}

	return false
}

// SetLoadBalancerType gets a reference to the given string and assigns it to the LoadBalancerType field.
func (o *LoadBalancer) SetLoadBalancerType(v string) {
	o.LoadBalancerType = &v
}

// GetNetId returns the NetId field value if set, zero value otherwise.
func (o *LoadBalancer) GetNetId() string {
	if o == nil || o.NetId == nil {
		var ret string
		return ret
	}
	return *o.NetId
}

// GetNetIdOk returns a tuple with the NetId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetNetIdOk() (string, bool) {
	if o == nil || o.NetId == nil {
		var ret string
		return ret, false
	}
	return *o.NetId, true
}

// HasNetId returns a boolean if a field has been set.
func (o *LoadBalancer) HasNetId() bool {
	if o != nil && o.NetId != nil {
		return true
	}

	return false
}

// SetNetId gets a reference to the given string and assigns it to the NetId field.
func (o *LoadBalancer) SetNetId(v string) {
	o.NetId = &v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *LoadBalancer) GetSecurityGroups() []string {
	if o == nil || o.SecurityGroups == nil {
		var ret []string
		return ret
	}
	return *o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetSecurityGroupsOk() ([]string, bool) {
	if o == nil || o.SecurityGroups == nil {
		var ret []string
		return ret, false
	}
	return *o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *LoadBalancer) HasSecurityGroups() bool {
	if o != nil && o.SecurityGroups != nil {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []string and assigns it to the SecurityGroups field.
func (o *LoadBalancer) SetSecurityGroups(v []string) {
	o.SecurityGroups = &v
}

// GetSourceSecurityGroup returns the SourceSecurityGroup field value if set, zero value otherwise.
func (o *LoadBalancer) GetSourceSecurityGroup() SourceSecurityGroup {
	if o == nil || o.SourceSecurityGroup == nil {
		var ret SourceSecurityGroup
		return ret
	}
	return *o.SourceSecurityGroup
}

// GetSourceSecurityGroupOk returns a tuple with the SourceSecurityGroup field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetSourceSecurityGroupOk() (SourceSecurityGroup, bool) {
	if o == nil || o.SourceSecurityGroup == nil {
		var ret SourceSecurityGroup
		return ret, false
	}
	return *o.SourceSecurityGroup, true
}

// HasSourceSecurityGroup returns a boolean if a field has been set.
func (o *LoadBalancer) HasSourceSecurityGroup() bool {
	if o != nil && o.SourceSecurityGroup != nil {
		return true
	}

	return false
}

// SetSourceSecurityGroup gets a reference to the given SourceSecurityGroup and assigns it to the SourceSecurityGroup field.
func (o *LoadBalancer) SetSourceSecurityGroup(v SourceSecurityGroup) {
	o.SourceSecurityGroup = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *LoadBalancer) GetSubnets() []string {
	if o == nil || o.Subnets == nil {
		var ret []string
		return ret
	}
	return *o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetSubnetsOk() ([]string, bool) {
	if o == nil || o.Subnets == nil {
		var ret []string
		return ret, false
	}
	return *o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *LoadBalancer) HasSubnets() bool {
	if o != nil && o.Subnets != nil {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *LoadBalancer) SetSubnets(v []string) {
	o.Subnets = &v
}

// GetSubregionNames returns the SubregionNames field value if set, zero value otherwise.
func (o *LoadBalancer) GetSubregionNames() []string {
	if o == nil || o.SubregionNames == nil {
		var ret []string
		return ret
	}
	return *o.SubregionNames
}

// GetSubregionNamesOk returns a tuple with the SubregionNames field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetSubregionNamesOk() ([]string, bool) {
	if o == nil || o.SubregionNames == nil {
		var ret []string
		return ret, false
	}
	return *o.SubregionNames, true
}

// HasSubregionNames returns a boolean if a field has been set.
func (o *LoadBalancer) HasSubregionNames() bool {
	if o != nil && o.SubregionNames != nil {
		return true
	}

	return false
}

// SetSubregionNames gets a reference to the given []string and assigns it to the SubregionNames field.
func (o *LoadBalancer) SetSubregionNames(v []string) {
	o.SubregionNames = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *LoadBalancer) GetTags() []ResourceTag {
	if o == nil || o.Tags == nil {
		var ret []ResourceTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancer) GetTagsOk() ([]ResourceTag, bool) {
	if o == nil || o.Tags == nil {
		var ret []ResourceTag
		return ret, false
	}
	return *o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LoadBalancer) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ResourceTag and assigns it to the Tags field.
func (o *LoadBalancer) SetTags(v []ResourceTag) {
	o.Tags = &v
}

type NullableLoadBalancer struct {
	Value LoadBalancer
	ExplicitNull bool
}

func (v NullableLoadBalancer) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}	
}

func (v *NullableLoadBalancer) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}

