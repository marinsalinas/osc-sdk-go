/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.1
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// Tag Information about the tag.
type Tag struct {
	// The key of the tag, with a minimum of 1 character.
	Key *string `json:"Key,omitempty"`
	// The ID of the resource.
	ResourceId *string `json:"ResourceId,omitempty"`
	// The type of the resource.
	ResourceType *string `json:"ResourceType,omitempty"`
	// The value of the tag, between 0 and 255 characters.
	Value *string `json:"Value,omitempty"`
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Tag) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetKeyOk() (string, bool) {
	if o == nil || o.Key == nil {
		var ret string
		return ret, false
	}
	return *o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Tag) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Tag) SetKey(v string) {
	o.Key = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *Tag) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetResourceIdOk() (string, bool) {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret, false
	}
	return *o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *Tag) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *Tag) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Tag) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetResourceTypeOk() (string, bool) {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret, false
	}
	return *o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Tag) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Tag) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Tag) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetValueOk() (string, bool) {
	if o == nil || o.Value == nil {
		var ret string
		return ret, false
	}
	return *o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Tag) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Tag) SetValue(v string) {
	o.Value = &v
}

type NullableTag struct {
	Value        Tag
	ExplicitNull bool
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
