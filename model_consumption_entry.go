/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.1
 * Contact: support@outscale.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package oscgo

import (
	"bytes"
	"encoding/json"
)

// ConsumptionEntry Information about the resources consumed during the specified time period.
type ConsumptionEntry struct {
	// The category of the resource (for example, `network`).
	Category *string `json:"Category,omitempty"`
	// The beginning of the time period.
	FromDate *string `json:"FromDate,omitempty"`
	// The API call that triggered the resource consumption (for example, `RunInstances` or `CreateVolume`).
	Operation *string `json:"Operation,omitempty"`
	// The service of the API call (`TinaOS-FCU`, `TinaOS-LBU`, `TinaOS-OSU` or `TinaOS-DirectLink`).
	Service *string `json:"Service,omitempty"`
	// A description of the consumed resource.
	Title *string `json:"Title,omitempty"`
	// The end of the time period.
	ToDate *string `json:"ToDate,omitempty"`
	// The type of resource, depending on the API call.
	Type *string `json:"Type,omitempty"`
	// The consumed amount for the resource. The unit depends on the resource type. For more information, see the `Title` element.
	Value *string `json:"Value,omitempty"`
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetCategoryOk() (string, bool) {
	if o == nil || o.Category == nil {
		var ret string
		return ret, false
	}
	return *o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ConsumptionEntry) SetCategory(v string) {
	o.Category = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetFromDate() string {
	if o == nil || o.FromDate == nil {
		var ret string
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetFromDateOk() (string, bool) {
	if o == nil || o.FromDate == nil {
		var ret string
		return ret, false
	}
	return *o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given string and assigns it to the FromDate field.
func (o *ConsumptionEntry) SetFromDate(v string) {
	o.FromDate = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetOperationOk() (string, bool) {
	if o == nil || o.Operation == nil {
		var ret string
		return ret, false
	}
	return *o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *ConsumptionEntry) SetOperation(v string) {
	o.Operation = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetServiceOk() (string, bool) {
	if o == nil || o.Service == nil {
		var ret string
		return ret, false
	}
	return *o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *ConsumptionEntry) SetService(v string) {
	o.Service = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetTitleOk() (string, bool) {
	if o == nil || o.Title == nil {
		var ret string
		return ret, false
	}
	return *o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ConsumptionEntry) SetTitle(v string) {
	o.Title = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetToDate() string {
	if o == nil || o.ToDate == nil {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetToDateOk() (string, bool) {
	if o == nil || o.ToDate == nil {
		var ret string
		return ret, false
	}
	return *o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *ConsumptionEntry) SetToDate(v string) {
	o.ToDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConsumptionEntry) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConsumptionEntry) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ConsumptionEntry) GetValueOk() (string, bool) {
	if o == nil || o.Value == nil {
		var ret string
		return ret, false
	}
	return *o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConsumptionEntry) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConsumptionEntry) SetValue(v string) {
	o.Value = &v
}

type NullableConsumptionEntry struct {
	Value        ConsumptionEntry
	ExplicitNull bool
}

func (v NullableConsumptionEntry) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableConsumptionEntry) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
